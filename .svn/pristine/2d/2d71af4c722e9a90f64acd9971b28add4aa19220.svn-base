package kr.happyjob.study.tut.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.happyjob.study.common.comnUtils.ComnCodUtil;
import kr.happyjob.study.tut.model.ReportControlVO;
import kr.happyjob.study.tut.service.ReportControlService;

@Controller
@RequestMapping("/tut/")
public class ReportControlController {
	         
	@Autowired
	ReportControlService reportControlService;
	
	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();
	
	
	
	/* 과제관리 초기화면  및 강의 & 과제 리스트 불러오기*/
	@RequestMapping("reportControl.do")
	public String reportControl( @RequestParam Map<String, Object> paramMap, Model model, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {		
		
//		String user_no = (String) session.getAttribute("loginId");
//		
//		paramMap.put("user_no", user_no);

		logger.info("+ Start " + className + ".reportControl");
		logger.info("   - paramMap : " + paramMap);
		
		List<ReportControlVO> lectureInfo = reportControlService.showLectureList(paramMap);
		List<ReportControlVO> projectInfo = reportControlService.showProjectInfo(paramMap);
	
		
		for(ReportControlVO test : projectInfo){
			System.out.println("test::"+test);
		}
		
		model.addAttribute("lectureInfo", lectureInfo);
		model.addAttribute("projectInfo", projectInfo);
		
		model.addAttribute("cccc", lectureInfo.get(0).getLec_no());
		
		logger.info("+ End " + className + ".reportControl");

		return "tut/reportControl";
	}

	//제출한 학생 불러오기
	@RequestMapping("submitInfo.do")
	public String submitInfo(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		String task_id = (String) paramMap.get("task_id");
		paramMap.put("task_id", Integer.parseInt(task_id));
		
		List<ReportControlVO> submitInfo = reportControlService.showSubmitInfo(paramMap);
		model.addAttribute("submitInfo", submitInfo);
		
		return "tut/reportControl_submitName";
	}
//	//제출한 학생의 과제 자세히 보기
	@RequestMapping("studentProjectCon.do")
	public String studentProjectCon(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		String user_no = (String) paramMap.get("user_no");
		paramMap.put("user_no", user_no);
		String task_id = (String) paramMap.get("task_id");
		paramMap.put("task", Integer.parseInt(task_id));
		
		ReportControlVO studentCon = reportControlService.showStudentCon(paramMap);
		model.addAttribute("ac", studentCon);
		
		return "tut/reportControl_studentCon";
	}
	//과제만들기 파일업로드포함
	@RequestMapping("makeProject.do")
	@ResponseBody
	public Map<String, Object> makeProject(Model model, @RequestParam Map<String, Object> paramMap,
	         HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {		
		
		logger.info("+ Start " + className + ".makeProejct");
		logger.info("   - paramMap : " + paramMap);
		
		Map<String, String> complete = reportControlService.makeProject(paramMap);
		System.out.println(complete);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("result","SUCCESS");
		

		logger.info("+ End " + className + ".makeProejct");


		return resultMap;
	}

	//셀렉트박스 클릭하면 lec_id넘겨서 수업정보, 과제정보 불러오기
//	@RequestMapping("showLectureList.do")
//	public String showLectureList(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
////	String lec_no = (String) request.getParameter("lec_no");
////		paramMap.put("lec_no", Integer.parseInt(lec_no));
//		
//		
//		logger.info("+ Start " + className + ".showLectureList");
//		logger.info("   - paramMap : " + paramMap);
//		
//
//
//		logger.info("+ End " + className + ".showLectureList");
//
//		return "tut/reportControl";
//	}
//	

//	
//	//강사가 올린 과제 정보 자세히 보기
	@RequestMapping("projectInfo2.do")
	public String projectInfo2(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		String task_id = (String) paramMap.get("task_id");
		paramMap.put("task_id", Integer.parseInt(task_id));
		ReportControlVO projectInfo = reportControlService.showProjectInfo2(paramMap);
		model.addAttribute("projectInfo", projectInfo);
		
		return "tut/reportControl_reportInfo";
	}
//	
//	
//	//과제를 수정하기위해 강의아이디와 과제아이디 가져오기
	@RequestMapping("newInputModal.do")
	public String newInputModal(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		String task_id = (String) paramMap.get("task_id");
		model.addAttribute("abc", Integer.parseInt(task_id));
		
		String lec_no = (String) paramMap.get("lec_no");
		model.addAttribute("abcd", Integer.parseInt(lec_no));
		
		return "tut/reportControl_updateTask";
	}
//	
//	
//	//과제수정하기 파일다운로드기능 포함
//	@RequestMapping("updateProject.do")
//	@ResponseBody
//	public Map<String, Object> updateProject(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
//		
//		int complete = projectControlService.updateProject(paramMap, request);
//		System.out.println(complete);
//		
//		Map<String, Object> resultMap = new HashMap<String, Object>();
//		resultMap.put("result","SUCCESS");
//		
//		return resultMap;
//	}
//	
//	
//	
//	//학생이 제출한 과제 다운로드하기
	@RequestMapping("downloadHwk.do")
	public String downloadHwk(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		
		String file = (String) paramMap.get("sub_path");
		String fileFilename = (String) paramMap.get("sub_filename");
		System.out.println(file);
		System.out.println(fileFilename);
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(file));
		response.setContentType("application/octet-stream");
		response.setContentLength(fileByte.length);
		response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(fileFilename,"UTF-8")+"\";");
		response.setHeader("Content-Transfer-Encoding", "binary");
		response.getOutputStream().write(fileByte);
		     
		response.getOutputStream().flush();
		response.getOutputStream().close();
		
		return "tut/reportControl";
	}
//	
//	//강사가 올린 과제 다운로드하기
//	@RequestMapping("downloadTutor.do")
//	public String downloadTutor(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
//		
//		String file = (String) paramMap.get("hwk_url");
//		String fileFname = (String) paramMap.get("hwk_fname");
//		System.out.println(file);
//		System.out.println(fileFname);
//		
//		byte fileByte[] = FileUtils.readFileToByteArray(new File(file));
//		response.setContentType("application/octet-stream");
//		response.setContentLength(fileByte.length);
//		response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(fileFname,"UTF-8")+"\";");//file대신에 파일이름칼럼넣어라
//		response.setHeader("Content-Transfer-Encoding", "binary");
//		response.getOutputStream().write(fileByte);
//		     
//		response.getOutputStream().flush();
//		response.getOutputStream().close();
//		
//		
//		return "tut/learn_mng/projectControl";
//	}
}